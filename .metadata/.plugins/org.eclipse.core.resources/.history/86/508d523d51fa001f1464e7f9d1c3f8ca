package com.slt.peotv.userservice.lms.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.slt.peotv.userservice.lms.entity.company.ProfilesEntity;
import com.slt.peotv.userservice.lms.entity.company.SectionEntity;
import jakarta.persistence.*;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Objects;

@Entity
@Table(name="users")
public class UserEntity implements Serializable {
 
	private static final long serialVersionUID = 5313493413859894403L;
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@JsonIgnore
	private long id;
	
	private String userId;

	private String employeeId;

	private String firstName;
	
	private String lastName;
	
	private String email;
	
	@Column(nullable=false)
	@JsonIgnore
	private String encryptedPassword;
	
	@JsonIgnore
	private String emailVerificationToken;
	
	@JsonIgnore
	private Boolean emailVerificationStatus = false;

	@OneToMany(mappedBy="userDetails", cascade=CascadeType.ALL)
	private List<AddressEntity> addresses;

	
	private String defaultAddress;

	private String profilePic;

	@Column(name = "gender", length = 1)
	private String gender;

	@Column(name = "phone", length = 45)
	private String phone;

	@Column(name = "is_slt_emp",columnDefinition = "int(10) unsigned default 0")
	private Integer isSltEmp;
	@Column(name = "is_slt_intern",columnDefinition = "int(10) unsigned default 0")
	private Integer isSltIntern;

	@Column(nullable=false)
	private Integer active = 1;

	@ManyToMany(cascade= { CascadeType.PERSIST }, fetch = FetchType.EAGER )
	@JoinTable(name="users_roles",
			joinColumns=@JoinColumn(name="users_id",referencedColumnName="id"),
			inverseJoinColumns=@JoinColumn(name="roles_id",referencedColumnName="id"))
	@Column(nullable=false)
	@JsonManagedReference
	private Collection<RoleEntity> roles;

	@ManyToMany(cascade= { CascadeType.PERSIST }, fetch = FetchType.EAGER )
	@JoinTable(name="users_profile",
			joinColumns=@JoinColumn(name="users_id",referencedColumnName="id"),
			inverseJoinColumns=@JoinColumn(name="profile_id",referencedColumnName="id"))
	@Column(nullable=false)
	private Collection<ProfilesEntity> profiles;

	@ManyToMany(cascade= { CascadeType.PERSIST }, fetch = FetchType.EAGER )
	@JoinTable(name="users_section",
			joinColumns=@JoinColumn(name="users_id",referencedColumnName="id"),
			inverseJoinColumns=@JoinColumn(name="section_id",referencedColumnName="id"))
	@Column(nullable=false)
	private Collection<SectionEntity> sections;
	
	private Date join_date;

	public Date getJoin_date() {
		return join_date;
	}

	public void setJoin_date(Date join_date) {
		this.join_date = join_date;
	}

	public List<AddressEntity> getAddresses() {
		return addresses;
	}

	public Collection<RoleEntity> getRoles() {
		return roles;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public String getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(String employeeId) {
		this.employeeId = employeeId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getEncryptedPassword() {
		return encryptedPassword;
	}

	public void setEncryptedPassword(String encryptedPassword) {
		this.encryptedPassword = encryptedPassword;
	}

	public String getEmailVerificationToken() {
		return emailVerificationToken;
	}

	public void setEmailVerificationToken(String emailVerificationToken) {
		this.emailVerificationToken = emailVerificationToken;
	}

	public Boolean getEmailVerificationStatus() {
		return emailVerificationStatus;
	}

	public void setEmailVerificationStatus(Boolean emailVerificationStatus) {
		this.emailVerificationStatus = emailVerificationStatus;
	}

	public void setAddresses(List<AddressEntity> addresses) {
		this.addresses = addresses;
	}

	public String getDefaultAddress() {
		return defaultAddress;
	}

	public void setDefaultAddress(String defaultAddress) {
		this.defaultAddress = defaultAddress;
	}

	public String getProfilePic() {
		return profilePic;
	}

	public void setProfilePic(String profilePic) {
		this.profilePic = profilePic;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Integer getIsSltEmp() {
		return isSltEmp;
	}

	public void setIsSltEmp(Integer isSltEmp) {
		this.isSltEmp = isSltEmp;
	}

	public Integer getIsSltIntern() {
		return isSltIntern;
	}

	public void setIsSltIntern(Integer isSltIntern) {
		this.isSltIntern = isSltIntern;
	}

	public Integer getActive() {
		return active;
	}

	public void setActive(Integer active) {
		this.active = active;
	}

	public void setRoles(Collection<RoleEntity> roles) {
		this.roles = roles;
	}

	public Collection<ProfilesEntity> getProfiles() {
		return profiles;
	}

	public void setProfiles(Collection<ProfilesEntity> profiles) {
		this.profiles = profiles;
	}

	public Collection<SectionEntity> getSections() {
		return sections;
	}

	public void setSections(Collection<SectionEntity> sections) {
		this.sections = sections;
	}

	@Override
	public boolean equals(Object o) {
		if (o == null || getClass() != o.getClass()) return false;
		UserEntity that = (UserEntity) o;
		return id == that.id && defaultAddress == that.defaultAddress && Objects.equals(userId, that.userId) && Objects.equals(employeeId, that.employeeId) && Objects.equals(firstName, that.firstName) && Objects.equals(lastName, that.lastName) && Objects.equals(email, that.email) && Objects.equals(encryptedPassword, that.encryptedPassword) && Objects.equals(emailVerificationToken, that.emailVerificationToken) && Objects.equals(emailVerificationStatus, that.emailVerificationStatus) && Objects.equals(addresses, that.addresses) && Objects.equals(profilePic, that.profilePic) && Objects.equals(gender, that.gender) && Objects.equals(phone, that.phone) && Objects.equals(isSltEmp, that.isSltEmp) && Objects.equals(isSltIntern, that.isSltIntern) && Objects.equals(active, that.active) && Objects.equals(roles, that.roles) && Objects.equals(profiles, that.profiles) && Objects.equals(sections, that.sections);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, userId, employeeId, firstName, lastName, email, encryptedPassword, emailVerificationToken, emailVerificationStatus, addresses, defaultAddress, profilePic, gender, phone, isSltEmp, isSltIntern, active, roles, profiles, sections);
	}

	public UserEntity() {
		super();
	}
}
