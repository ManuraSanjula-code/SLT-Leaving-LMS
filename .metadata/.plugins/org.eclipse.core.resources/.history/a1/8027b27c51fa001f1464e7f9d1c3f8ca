package com.slt.peotv.userservice.lms.contoller;

import com.slt.peotv.userservice.lms.entity.UserEntity;
import com.slt.peotv.userservice.lms.entity.company.ProfilesEntity;
import com.slt.peotv.userservice.lms.entity.company.SectionEntity;
import com.slt.peotv.userservice.lms.exceptions.UserServiceException;
import com.slt.peotv.userservice.lms.exceptions.UserUnAuthorizedServiceException;
import com.slt.peotv.userservice.lms.repository.UserRepository;
import com.slt.peotv.userservice.lms.service.AddressService;
import com.slt.peotv.userservice.lms.service.UserService;
import com.slt.peotv.userservice.lms.shared.Roles;
import com.slt.peotv.userservice.lms.shared.dto.AddressDTO;
import com.slt.peotv.userservice.lms.shared.dto.UserDto;
import com.slt.peotv.userservice.lms.shared.model.request.AddressRequestModel;
import com.slt.peotv.userservice.lms.shared.model.request.ProfileReq;
import com.slt.peotv.userservice.lms.shared.model.request.UserDetailsRequestModel;
import com.slt.peotv.userservice.lms.shared.model.request.UserPasswordReset;
import com.slt.peotv.userservice.lms.shared.model.response.*;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.file.Files;
import java.util.*;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

@RestController
@RequestMapping("/users")
public class UserController {
	
	public class UserMapper {
	    public static UserDto mapToUserDto(UserDetailsRequestModel requestModel) {
	        UserDto userDto = new UserDto();

	        userDto.setUserId(requestModel.getUserId());
	        userDto.setFirstName(requestModel.getFirstName());
	        userDto.setLastName(requestModel.getLastName());
	        userDto.setEmail(requestModel.getEmail());
	        userDto.setPassword(requestModel.getPassword());
	        userDto.setProfilePic(requestModel.getProfilePic());
	        userDto.setDefaultAddress(requestModel.getDefaultAddress());
	        userDto.setIsSltEmp(requestModel.getIsSltEmp());
	        userDto.setIsSltIntern(requestModel.getIsSltIntern());
	        userDto.setActive(requestModel.getActive());
	        userDto.setPhone(requestModel.getPhone());
	        userDto.setGender(requestModel.getGender());
	        userDto.setRoles(requestModel.getRoles());
	        userDto.setSections(requestModel.getSections());
	        userDto.setProfiles(requestModel.getProfiles());

	        // Map AddressRequestModel list to AddressDTO list
	        List<AddressDTO> addressDTOs = requestModel.getAddresses().stream().map(UserMapper::mapToAddressDTO).collect(Collectors.toList());
	        userDto.setAddresses(addressDTOs);

	        return userDto;
	    }

	    private static AddressDTO mapToAddressDTO(AddressRequestModel addressRequestModel) {
	        AddressDTO addressDTO = new AddressDTO();
	        addressDTO.setCity(addressRequestModel.getCity());
	        addressDTO.setCountry(addressRequestModel.getCountry());
	        addressDTO.setStreetName(addressRequestModel.getStreetName());
	        addressDTO.setPostalCode(addressRequestModel.getPostalCode());
	        return addressDTO;
	    }
	    public static UserRest mapUserDtoToUserRest(UserDto userDto) {
	        if (userDto == null) {
	            return null;
	        }

	        UserRest userRest = new UserRest();
	        userRest.setUserId(userDto.getUserId());
	        userRest.setFirstName(userDto.getFirstName());
	        userRest.setLastName(userDto.getLastName());
	        userRest.setEmail(userDto.getEmail());
	        userRest.setProfilePic(userDto.getProfilePic());
	        userRest.setRoles(userDto.getRoles());
	        userRest.setSections(userDto.getSections());
	        userRest.setProfiles(userDto.getProfiles());
	        userRest.setIsSltEmp(userDto.getIsSltEmp());
	        userRest.setIsSltIntern(userDto.getIsSltIntern());
	        userRest.setActive(userDto.getActive());
	        userRest.setPhone(userDto.getPhone());
	        userRest.setGender(userDto.getGender());
	        userRest.setDefaultAddress(userDto.getDefaultAddress());

	        // Convert List<AddressDto> to List<AddressesRest>
	        if (userDto.getAddresses() != null) {
	            List<AddressesRest> addressesRestList = userDto.getAddresses().stream()
	                    .map(addressDto -> {
	                        AddressesRest addressesRest = new AddressesRest();
	                        addressesRest.setAddressId(addressDto.getAddressId());
	                        addressesRest.setCity(addressDto.getCity());
	                        addressesRest.setCountry(addressDto.getCountry());
	                        addressesRest.setStreetName(addressDto.getStreetName());
	                        addressesRest.setPostalCode(addressDto.getPostalCode());
	                        return addressesRest;
	                    })
	                    .collect(Collectors.toList());

	            userRest.setAddresses(addressesRestList);
	        }

	        return userRest;
	    }
	}


	@Autowired
	UserService userService;

	@Autowired
	AddressService addressService;

	@Autowired
	AddressService addressesService;
	
	@Autowired
	UserRepository userRepo; 

	@GetMapping(path = "/{userid}")
	public UserRest getUser(@PathVariable String userid) {
		UserDto userDto = userService.getUserByUserId(userid);
		ModelMapper modelMapper = new ModelMapper();
		return modelMapper.map(userDto, UserRest.class);
	}

	@PostMapping("/profiles/{name}")
	public ProfilesEntity createProfiles(@PathVariable String name, @RequestBody ProfileReq req){
		return userService.createProfiles(name, req);
	}

	@PostMapping("/section/{name}")
	public SectionEntity createSection(@PathVariable String name){
		return userService.createSection(name);
	}

	@PostMapping("/profiles/{name}/create")
	public ProfilesEntity getProfiles(@PathVariable String name){
		return userService.getProfiles(name);
	}

	@PostMapping("/section/{name}/create")
	public SectionEntity getSection(@PathVariable String name){
		return userService.getSection(name);
	}

	@GetMapping("/check-address/{userid}")
	public boolean checkAddress(@PathVariable String userid) {
		return userService.userAddress(userid);
	}
	
	@PutMapping("/upload-pic/{userid}")
	public UserRest updateUserProfile(@PathVariable String userid, @RequestParam("image") MultipartFile file) throws Exception {
		ModelMapper modelMapper = new ModelMapper();
		UserDto createdUser = userService.updateUserProfile(file, userid);
		return modelMapper.map(createdUser, UserRest.class);
	}

	@PostMapping()
	public UserRest createUser(@RequestBody UserDetailsRequestModel userDetails) throws Exception {
		UserRest returnValue = new UserRest();

		ModelMapper modelMapper = new ModelMapper();
		UserDto userDto = modelMapper.map(userDetails, UserDto.class);
		userDto.setRoles(new HashSet<>(Arrays.asList(Roles.ROLE_USER.name())));

		UserDto createdUser = userService.createUser(userDto);
		returnValue = modelMapper.map(createdUser, UserRest.class);

		return returnValue;
	}


	@PutMapping(path = "/{userid}")
	public UserRest updateUser(@PathVariable String userid, @RequestBody UserDetailsRequestModel userDetails) {
	
		UserDto updateUser = userService.updateUser(userid, UserMapper.mapToUserDto(userDetails));
		
		return UserMapper.mapUserDtoToUserRest(updateUser);
	}

	@DeleteMapping(path = "/{userid}")
	public OperationStatusModel deleteUser(@PathVariable String userid) {
		OperationStatusModel returnValue = new OperationStatusModel();
		returnValue.setOperationName(RequestOperationName.DELETE.name());

		userService.deleteUser(userid);

		returnValue.setOperationResult(RequestOperationStatus.SUCCESS.name());
		return returnValue;
	}

	@GetMapping()
	public List<UserRest> getUsers(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "limit", defaultValue = "2") int limit) {
		List<UserRest> returnValue = new ArrayList<>();

		List<UserDto> users = userService.getUsers(page, limit);
 
		for (UserDto userDto : users) {
			UserRest userModel = new UserRest();
			BeanUtils.copyProperties(userDto, userModel);
			returnValue.add(userModel);
		}

		return returnValue;
	}
	

    @GetMapping("/all")
    public Page<UserEntity> getAllUsers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Pageable pageable = PageRequest.of(page, size);
        return userRepo.findAll(pageable);
    }

	@GetMapping(path = "/{addressId}/addresses", produces = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE})
	public CollectionModel<AddressesRest> getUserAddresses(@PathVariable String addressId) {
		List<AddressesRest> returnValue = new ArrayList<>();

		List<AddressDTO> addressesDTO = addressesService.getAddresses(addressId);

		if (addressesDTO != null && !addressesDTO.isEmpty()) {
			Type listType = new TypeToken<List<AddressesRest>>() {
			}.getType();
			returnValue = new ModelMapper().map(addressesDTO, listType);
			
			for (AddressesRest addressRest : returnValue) {
				Link selfLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class)
						.getUserAddress(addressId, addressRest.getAddressId()))
						.withSelfRel();
				addressRest.add(selfLink);
			}
			
		}
		
		Link userLink = WebMvcLinkBuilder.linkTo(UserController.class).slash(addressId).withRel("user");
		Link selfLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class)
				.getUserAddresses(addressId))
				.withSelfRel();
		return CollectionModel.of(returnValue, userLink, selfLink);
	}

	@GetMapping(path = "/{userId}/addresses/{addressId}", produces = { MediaType.APPLICATION_JSON_VALUE,
			MediaType.APPLICATION_XML_VALUE})
	public EntityModel<AddressesRest> getUserAddress(@PathVariable String userId, @PathVariable String addressId) {

		AddressDTO addressesDto = addressService.getAddress(addressId);

		ModelMapper modelMapper = new ModelMapper();
		AddressesRest returnValue = modelMapper.map(addressesDto, AddressesRest.class);
		
		Link userLink = WebMvcLinkBuilder.linkTo(UserController.class).slash(userId).withRel("user");
		Link userAddressesLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class).getUserAddresses(userId))
				.withRel("addresses");
		Link selfLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class)
				.getUserAddress(userId, addressId))
				.withSelfRel();

 	
		return EntityModel.of(returnValue, Arrays.asList(userLink,userAddressesLink, selfLink));
	}

	@PostMapping("/reset-password/{userId}")
	public void resetPassWord(@RequestBody UserPasswordReset userPasswordReset, @PathVariable String userId){

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String username = authentication.getName();

		if(!Objects.equals(username, userId))
			throw new UserUnAuthorizedServiceException(ErrorMessages.AUTHENTICATION_FAILED.getErrorMessage());

		if(!userPasswordReset.getNewPassword().equals(userPasswordReset.getNewPassword()))
			throw new UserServiceException(ErrorMessages.MISSING_REQUIRED_FIELD.getErrorMessage());

		userService.resetPassWord(userPasswordReset);
	}

	@GetMapping("/image/{userid}")
	public ResponseEntity<Resource> getImage(@PathVariable String userid) {
		try {
			Resource resource = userService.getImage(userid);

			String contentType = "image/jpeg"; // Default to JPEG
			try {
				contentType = Files.probeContentType(resource.getFile().toPath());
			} catch (IOException ex) {
				ex.printStackTrace();
			}

			return ResponseEntity.ok()
					.contentType(MediaType.parseMediaType(contentType))
					.body(resource);
		} catch (Exception e) {
			return ResponseEntity.notFound().build();
		}
	}

}
